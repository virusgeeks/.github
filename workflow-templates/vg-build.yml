on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - $default-branch
      - 'pre-release'

name: VG Build Template
jobs:
  build_and_test:
    name: Build and test job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo '::set-output name=dir::$(yarn cache dir)'

      - uses: actions/cache@v2
        name: validate cache
        id: yarn-cache
        with:
          path: |
            ~/.cache/Cypress 
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/.next/cache
            **/node_modules
            node_modules
          key: ${{ runner.os }}-vg-build-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-vg-build-yarn-

      - uses: actions/setup-node@v2
        with:
          registry-url: 'https://npm.pkg.github.com'
          scope: '@virusgeeks'
          always-auth: true

      - name: Installing yarn dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          NODE_AUTH_TOKEN: ${{ secrets.VG_NODE_TOKEN }}

      - name: Build
        run: yarn build

      - name: Lint
        run : yarn lint

      - name: Test
        run: yarn test

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        continue-on-error: true
        with:
          name: cypress-screenshots
          path: ${{ github.workspace }}/**/cypress/screenshots

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        continue-on-error: true
        with:
          name: cypress-videos
          path: ${{ github.workspace }}/**/cypress/videos

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        continue-on-error: true
        with:
          name: test-results
          path: ${{ github.workspace }}/**/reports

  create_release_tag:
    name: Create release tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/$default-branch' || github.ref == 'refs/heads/pre-release'
    needs: [build_and_test]
    outputs:
      tag_name: ${{ steps.version-tag.outputs.tag }}

    steps:
      - name: Generate version tag
        id: version-tag
        run: echo "::set-output name=tag::$(date +'%Y-%m-%d-%H-%M-%S')"

      - name: Create version and tag
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.version-tag.outputs.tag }}

  push_image:
    name: Push Image to container registry
    needs: [create_release_tag]
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.repository-name.outputs.name }}

    steps:
      - name: Get Repository Name
        id: repository-name
        run: echo "::set-output name=name::${GITHUB_REPOSITORY#*\/}"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.create_release_tag.outputs.tag_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr       
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.repository-name.outputs.name }}
          IMAGE_TAG: ${{ needs.create_release_tag.outputs.tag_name }}
          NODE_AUTH_TOKEN: ${{ secrets.VG_NODE_TOKEN }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo //npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN >> .npmrc
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy_to_test:
    name: Deploy To Test environment
    runs-on: ubuntu-latest
    needs: [push_image, create_release_tag]
    if: github.ref == 'refs/heads/$default-branch'

    steps:
      - name: Invoke deployment workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: 'Kubernetes Deployment workflow'
          token: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
          inputs: '{ "app_name": "${{ needs.push_image.outputs.app_name }}", "environment": "test", "release_tag": "${{ needs.create_release_tag.outputs.tag_name }}" }'

  deploy_to_staging:
    name: Deploy To Staging environment
    environment: staging
    runs-on: ubuntu-latest
    needs: [push_image, create_release_tag]

    steps:
      - name: Invoke deployment workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: 'Kubernetes Deployment workflow'
          token: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
          inputs: '{ "app_name": "${{ needs.push_image.outputs.app_name }}", "environment": "staging", "release_tag": "${{ needs.create_release_tag.outputs.tag_name }}" }'
    
  deploy_to_prod:
    name: Deploy To Prod environment
    environment: production
    runs-on: ubuntu-latest
    needs: [push_image, create_release_tag, deploy_to_staging]

    steps:
      - name: Invoke deployment workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: 'Kubernetes Deployment workflow'
          token: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
          inputs: '{ "app_name": "${{ needs.push_image.outputs.app_name }}", "environment": "production", "release_tag": "${{ needs.create_release_tag.outputs.tag_name }}" }'
